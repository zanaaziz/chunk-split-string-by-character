import java.util.ArrayList;

/**
 * @author Zana Daniel
 */
public class ChunkifyStringByCharacters {
    private static ArrayList<String> chunkifyStringByCharacters(String data, String characters, int chunk_size){
        // splitting at every instance of ";" into an array
        String[] commands_array = data.split(characters, data.length());

        // this is where we'll store the completed chunks
        ArrayList<String> chunks_array = new ArrayList<>();

        // stringbuilder with a given size (64 bytes in this case)
        byte[] size = new byte[chunk_size];
        StringBuilder chunk = new StringBuilder(size.length);
        
        // looping over each element of the string-split array we created above
        for(String command : commands_array){
            // checking if the current chunk + the next piece will exceed the given size
            if(chunk.toString().getBytes().length + command.getBytes().length < size.length && !command.isEmpty()){
                chunk.append(command);
                chunk.append(";");

            // once the condition above is false, we add the completed chunk to the "chunks_array" and clear the string builder.
            // then the cycle continues
            }else{
                chunks_array.add(chunk.toString());
                chunk.setLength(0);
                
                chunk.append(command);
                chunk.append(";");
            }
        }
        
        // finally, we return the array of chunks
        return chunks_array;
    }
    
    public static void main(String[] args) {
        String large_piece_of_data = "PU4365,11382;PD10912,11382;PD10912,4553;PD4365,4553;PD4365,11382;PU4365,4553;PD4376,4552;PD4387,4552;PD4399,4551;PD4410,4549;PD4421,4547;PD4433,4544;PD4444,4541;PD4455,4538;PD4467,4534;PD4478,4530;PD4488,4525;PD4499,4520;PD4509,4514;PD4520,4508;PD4529,4501;PD4539,4494;PD4548,4486;PD4557,4478;PD4565,4470;PD4573,4461;PD4581,4451;PD4588,4442;PD4594,4431;PD4600,4421;PD4605,4409;PD4610,4398;PD4614,4386;PD4617,4373;PD4620,4360;PD4622,4346;PD4623,4332;PD4623,4318;PD4623,4129;PD4624,4117;PD4624,4106;PD4625,4096;PD4627,4087;PD4629,4079;PD4632,4072;PD4634,4068;PD4635,4065;PD4638,4062;PD4640,4060;PD4643,4057;PD4645,4055;PD4648,4053;PD4652,4051;PD4655,4049;PD4659,4047;PD4663,4046;PD4668,4045;PD4678,4042;PD4689,4041;PD4701,4040;PD4715,4040;PD5220,4040;PD5246,4040;PD5270,4042;PD5282,4043;PD5293,4044;PD5304,4046;PD5315,4047;PD5326,4049;PD5336,4051;PD5347,4054;PD5356,4056;PD5366,4059;PD5376,4062;PD5385,4065;PD5394,4068;PD5402,4072;PD5411,4076;PD5419,4080;PD5427,4084;PD5435,4088;PD5442,4093;PD5449,4098;PD5456,4103;PD5463,4108;PD5470,4114;PD5476,4119;PD5482,4125;PD5488,4131;PD5494,4137;PD5499,4143;PD5505,4150;PD5510,4157;PD5515,4164;PD5520,4171;PD5524,4178;PD5533,4193;PD5540,4209;PD5547,4226;PD5554,4243;PD5559,4261;PD5564,4279;PD5568,4299;PD5572,4319;PD5575,4339;PD5577,4360;PD5579,4382;PD5581,4405;PD5581,4428;PD5582,4451;PD5582,8951;PD5581,8976;PD5580,9001;PD5578,9024;PD5575,9047;PD5571,9068;PD5567,9089;PD5564,9098;PD5561,9108;PD5559,9117;PD5555,9127;PD5552,9135;PD5548,9144;PD5545,9153;PD5541,9161;PD5537,9169;PD5532,9177;PD5528,9184;PD5523,9192;PD5518,9199;PD5513,9206;PD5508,9212;PD5502,9219;PD5497,9225;PD5491,9231;PD5485,9237;PD5479,9243;PD5472,9248;PD5466,9253;PD5459,9258;PD5452,9263;PD5445,9268;PD5437,9272;PD5430,9277;PD5422,9281;PD5406,9288;PD5390,9295;PD5372,9301;PD5354,9307;PD5335,9311;PD5316,9316;PD5296,9319;PD5275,9322;PD5253,9324;PD5231,9325;PD5208,9326;PD5185,9326;PD4913,9327;PD4519,9327;PD4511,9327;PD4503,9326;PD4496,9324;PD4490,9323;PD4484,9320;PD4478,9317;PD4473,9314;PD4469,9311;PD4465,9307;PD4461,9302;PD4458,9298;PD4455,9293;PD4453,9288;PD4451,9283;PD4449,9278;PD4448,9272;PD4447,9267;PD4447,9261;PD4447,9256;PD4448,9250;PD4449,9245;PD4450,9240;PD4452,9234;PD4454,9229;PD4456,9225;PD4459,9220;PD4462,9216;PD4465,9211;PD4469,9208;PD4474,9204;PD4478,9201;PD4483,9199;PD4599,9141;PD4603,9138;PD4606,9135;PD4610,9132;PD4613,9128;PD4616,9124;PD4618,9120;PD4620,9116;PD4622,9111;PD4623,9106;PD4624,9101;PD4625,9096;PD4625,9090;PD4625,9085;PD4624,9079;PD4623,9074;PD4622,9069;PD4620,9063;PD4618,9058;PD4616,9053;PD4613,9048;PD4609,9043;PD4606,9039;PD4602,9035;PD4597,9031;PD4592,9027;PD4587,9024;PD4581,9021;PD4575,9019;PD4568,9017;PD4561,9016;PD4553,9015;PD4545,9015;PD4365,9015;PD4184,9015;PD4176,9015;PD4168,9016;PD4161,9017;PD4154,9019;PD4148,9021;PD4142,9024;PD4137,9027;PD4132,9031;PD4127,9035;PD4123,9039;PD4120,9043;PD4116,9048;PD4113,9053;PD4111,9058;PD4109,9063;PD4107,9069;PD4106,9074;PD4105,9079;PD4104,9085;PD4104,9090;PD4104,9096;PD4105,9101;PD4106,9106;PD4107,9111;PD4109,9116;PD4111,9120;PD4113,9124;PD4116,9128;PD4119,9132;PD4123,9135;PD4126,9138;PD4130,9141;PD4246,9199;PD4251,9201;PD4255,9204;PD4260,9208;PD4264,9211;PD4267,9216;PD4270,9220;PD4273,9225;PD4275,9229;PD4277,9234;PD4279,9240;PD4280,9245;PD4281,9250;PD4282,9256;PD4282,9261;PD4282,9267;PD4281,9272;PD4280,9278;PD4278,9283;PD4276,9288;PD4274,9293;PD4271,9298;PD4268,9302;PD4264,9307;PD4260,9311;PD4256,9314;PD4251,9317;PD4245,9320;PD4239,9323;PD4233,9324;PD4226,9326;PD4218,9327;PD4210,9327;PD3816,9327;PD3544,9326;PD3521,9326;PD3498,9325;PD3476,9324;PD3454,9322;PD3433,9319;PD3413,9316;PD3394,9311;PD3375,9307;PD3357,9301;PD3339,9295;PD3323,9288;PD3307,9281;PD3299,9277;PD3292,9272;PD3284,9268;PD3277,9263;PD3270,9258;PD3263,9253;PD3257,9248;PD3250,9243;PD3244,9237;PD3238,9231;PD3232,9225;PD3227,9219;PD3221,9212;PD3216,9206;PD3211,9199;PD3206,9192;PD3201,9184;PD3197,9177;PD3192,9169;PD3188,9161;PD3184,9153;PD3181,9144;PD3177,9135;PD3174,9127;PD3170,9117;PD3168,9108;PD3165,9098;PD3162,9089;PD3158,9068;PD3154,9047;PD3151,9024;PD3149,9001;PD3148,8976;PD3147,8951;PD3147,4451;PD3148,4428;PD3148,4405;PD3150,4382;PD3152,4360;PD3154,4339;PD3157,4319;PD3161,4299;PD3165,4279;PD3170,4261;PD3175,4243;PD3182,4226;PD3189,4209;PD3196,4193;PD3205,4178;PD3209,4171;PD3214,4164;PD3219,4157;PD3224,4150;PD3230,4143;PD3235,4137;PD3241,4131;PD3247,4125;PD3253,4119;PD3259,4114;PD3266,4108;PD3273,4103;PD3280,4098;PD3287,4093;PD3295,4088;PD3302,4084;PD3310,4080;PD3318,4076;PD3327,4072;PD3335,4068;PD3344,4065;PD3354,4062;PD3363,4059;PD3373,4056;PD3382,4054;PD3393,4051;PD3403,4049;PD3414,4047;PD3425,4046;PD3436,4044;PD3447,4043;PD3459,4042;PD3483,4040;PD3509,4040;PD4014,4040;PD4028,4040;PD4040,4041;PD4051,4042;PD4061,4045;PD4066,4046;PD4070,4047;PD4074,4049;PD4077,4051;PD4081,4053;PD4084,4055;PD4086,4057;PD4089,4060;PD4091,4062;PD4094,4065;PD4095,4068;PD4097,4072;PD4100,4079;PD4102,4087;PD4104,4096;PD4105,4106;PD4105,4117;PD4106,4129;PD4106,4318;PD4106,4332;PD4107,4346;PD4109,4360;PD4112,4373;PD4115,4386;PD4119,4398;PD4124,4409;PD4129,4421;PD4135,4431;PD4141,4442;PD4148,4451;PD4156,4461;PD4164,4470;PD4172,4478;PD4181,4486;PD4190,4494;PD4200,4501;PD4209,4508;PD4220,4514;PD4230,4520;PD4241,4525;PD4251,4530;PD4262,4534;PD4274,4538;PD4285,4541;PD4296,4544;PD4308,4547;PD4319,4549;PD4330,4551;PD4342,4552;PD4353,4552;PD4365,4553;PU;";
             
        int chunk_index = 1;
        for(String chunk : chunkifyStringByCharacters(large_piece_of_data, ";", 64)){
            System.out.println("Chunk #" + chunk_index + " [" + chunk.getBytes().length + "] - " + chunk);
            chunk_index += 1;
        }
    }
}